// defines where the database is and how to connect
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// defines what to generate (prisma client for js)
generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  ANGRY
  SAD
}

// Resources that are reacted
enum ReactableType {
  COMMENT
  THREAD
}

// defines the table structure
model Movie {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  director    String
  releaseDate DateTime
  imagePath   String?
  threads     Thread[]
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?

  // Relations
  favoriteByUsers User[] @relation("FavoriteMovie")

  @@index([releaseDate])
  @@index([isDeleted])
}

model User {
  id        Int       @id @default(autoincrement())
  userId    String    @unique
  username  String
  password  String
  email     String    @unique
  isAdmin   Boolean
  imagePath String?
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  // Email verification
  isEmailVerified Boolean @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?

  // UserProfile related
  bio               String?
  favoriteCharacter String?
  favoriteMovieId   Int?
  favoriteMovie     Movie?  @relation("FavoriteMovie", fields: [favoriteMovieId], references: [id], onDelete: SetNull)

  // Relations
  comments  Comment[]
  threads   Thread[]
  reactions Reaction[]

  @@index([userId])
  @@index([username])
  @@index([email])
  @@index([isDeleted])
  @@index([isEmailVerified])
  @@index([emailVerificationToken])
}

model Thread {
  id          Int       @id @default(autoincrement())
  title       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @default(now())
  description String
  imagePath   String?
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  movieId     Int
  movie       Movie     @relation(fields: [movieId], references: [id], onDelete: Restrict)
  creatorId   Int
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Restrict)

  // Relations
  comments  Comment[]
  reactions Reaction[]

  @@index([createdAt])
  @@index([movieId])
  @@index([creatorId])
  @@index([isDeleted])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  level     Int      @default(1) // 1 = top-level, 2 = reply, 3 = reply to reply

  threadId Int
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Restrict)
  authorId Int
  author   User   @relation(fields: [authorId], references: [id], onDelete: Restrict)

  // コメント階層
  parentId Int? // トップレベル→null, サブレベル→親コメントID
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)

  // サブレベルコメント同士の返信関係
  replyToId Int? // 返信先のサブコメントID or null
  replyTo   Comment? @relation("CommentMentions", fields: [replyToId], references: [id], onDelete: SetNull)

  // Relations
  replies     Comment[]  @relation("CommentReplies")
  mentionedBy Comment[]  @relation("CommentMentions")
  reactions   Reaction[]

  @@index([createdAt])
  @@index([level])
  @@index([threadId])
  @@index([authorId])
  @@index([parentId])
}

// Reaction model for extensible like/reaction system
model Reaction {
  id            Int           @id @default(autoincrement())
  type          ReactionType  @default(LIKE)
  reactableType ReactableType
  createdAt     DateTime      @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Target of reaction (either comment or thread)
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  threadId  Int?
  thread    Thread?  @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@unique([userId, threadId])
  @@index([userId])
  @@index([commentId])
  @@index([threadId])
  @@index([type])
  @@index([reactableType])
}
