// defines where the database is and how to connect
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// defines what to generate (prisma client for js)
generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

// Reaction types enum
enum ReactionType {
  LIKE
  LOVE
  LAUGH
  ANGRY
  SAD
}

// defines the table structure
model Movie {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  director    String
  releaseDate DateTime
  imagePath   String?
  threads     Thread[]

  favoriteByUsers User[] @relation("FavoriteMovie")

  @@index([releaseDate])
}

model User {
  id        Int       @id @default(autoincrement())
  userId    String    @unique
  username  String
  password  String
  email     String    @unique
  isAdmin   Boolean
  imagePath String?
  
  // UserProfile fields
  bio               String?
  favoriteCharacter String?
  favoriteMovieId   Int?
  favoriteMovie     Movie?  @relation("FavoriteMovie", fields: [favoriteMovieId], references: [id])
  
  // Relations
  comments  Comment[]
  threads   Thread[]
  reactions Reaction[]

  @@index([username])
}

model Thread {
  id          Int       @id @default(autoincrement())
  title       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @default(now())
  description String
  imagePath   String?
  movieId     Int
  movie       Movie     @relation(fields: [movieId], references: [id])
  creatorId   Int
  creator     User      @relation(fields: [creatorId], references: [id])
  comments    Comment[]
  reactions   Reaction[]

  @@index([createdAt])
  @@index([movieId])
  @@index([creatorId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  threadId  Int
  thread    Thread   @relation(fields: [threadId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])

  // コメント階層
  parentId Int? /// トップレベル→null, サブレベル→親コメントID
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  // サブレベルコメント同士の返信関係
  replyToId   Int? /// 返信先のサブコメントID or null
  replyTo     Comment?  @relation("CommentMentions", fields: [replyToId], references: [id])
  mentionedBy Comment[] @relation("CommentMentions")

  // Reactions
  reactions Reaction[]

  @@index([createdAt])
  @@index([threadId])
  @@index([authorId])
  @@index([parentId])
}

// Reaction model for extensible like/reaction system
model Reaction {
  id           Int          @id @default(autoincrement())
  type         ReactionType @default(LIKE)
  
  // User who made the reaction
  userId       Int
  user         User         @relation(fields: [userId], references: [id])
  
  // Target of reaction (either comment or thread)
  commentId    Int?
  comment      Comment?     @relation(fields: [commentId], references: [id])
  threadId     Int?
  thread       Thread?      @relation(fields: [threadId], references: [id])

  // Ensure one user can only have one reaction per comment/thread
  @@unique([userId, commentId])
  @@unique([userId, threadId])
  @@index([userId])
  @@index([commentId])
  @@index([threadId])
  @@index([type])
}
